import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import TodoCard from "../components/TodoCard/TodoCard";
import { InputHTMLAttributes, useState } from "react";

// const TodoArray: Array<Todo> = [
//   { description: "Do chores", isComplete: false },
//   { description: "Eat shit", isComplete: false },
//   { description: "Watch TV", isComplete: false },
//   { description: "Drink METH", isComplete: false },
//   { description: "Destroy cars", isComplete: false },
//   { description: "Have Fun", isComplete: false },
//   { description: "Fail", isComplete: false },
// ];

const Home: NextPage = () => {
  // const TodoArray =  ?? [];
  // console.log(TodoArray);

  const utils = trpc.useContext();
  const todosQuery = trpc.useQuery(["todo.getAll"]);
  const setIsComplete = trpc.useMutation("todo.setIsComplete", {
    async onSuccess() {
      await utils.invalidateQueries(["todo.getAll"]);
    },
  });
  const deleteTodoQuery = trpc.useMutation("todo.delete", {
    async onSuccess() {
      await utils.invalidateQueries(["todo.getAll"]);
    },
  });

  const addTodoQuery = trpc.useMutation("todo.add", {
    async onSuccess() {
      await utils.invalidateQueries(["todo.getAll"]);
    },
  });

  const [inputText, setInputText] = useState("");

  // console.log("todos data is", todosQuery.data);
  // const [todos, setTodos] = useState(todosData ? [...todosData] : []);

  const toggleTodo = (atIndex: number, newValue: boolean) => {
    setIsComplete.mutate({
      id: atIndex,
      isComplete: newValue,
    });
    console.log("toggled todo");
  };

  const deleteTodo = (atIndex: number) => {
    deleteTodoQuery.mutate({ id: atIndex });
    console.log("deleted todo");
  };

  const updateInputText = (description: string) => {
    setInputText(description);
  };

  const addTodo = () => {
    addTodoQuery.mutate(inputText);
    console.log("todo " + inputText + " added");
  };

  const handleSubmit = (event: React.SyntheticEvent) => {
    // üëáÔ∏è prevent page refresh
    event.preventDefault();
    addTodo();
    setInputText("");
    const inputText: HTMLInputElement = document.querySelector("#inputText")!;
    inputText.value = "";
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex select-none flex-col gap-2 items-center justify-center min-h-screen p-4">
        {todosQuery.data ? (
          todosQuery.data.map((todoItem) => {
            return (
              // <div onClick={() => toggleTodo(index)}>
              <TodoCard
                todo={todoItem}
                key={todoItem.id}
                handleToggle={() => {
                  toggleTodo(todoItem.id, !todoItem.isComplete);
                }}
                handleDelete={() => {
                  deleteTodo(todoItem.id);
                }}
              />
              // </div>
            );
          })
        ) : (
          <></>
        )}
        <form
          className="flex flex-row gap-2 items-center"
          onSubmit={handleSubmit}
        >
          <label htmlFor="description">Add Todo</label>
          <input
            type="text"
            name="description"
            id="inputText"
            onChange={(event) => updateInputText(event.target.value)}
            className="rounded px-1 border-2 border-gray-500"
          />
          <button
            type="submit"
            className="rounded px-1 border-2 border-gray-500"
          >
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

export default Home;
