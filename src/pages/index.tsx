import type { NextPage } from "next";
import Head from "next/head";
import { MouseEvent, useState } from "react";
import { trpc } from "../utils/trpc";

type TodoCardProps = {
  description: string;
  isComplete: boolean;
  callback?: Function;
};

const TodoCardArray: Array<TodoCardProps> = [
  { description: "Do chores", isComplete: false },
  { description: "Eat shit", isComplete: false },
  { description: "Watch TV", isComplete: false },
  { description: "Drink METH", isComplete: false },
  { description: "Destroy cars", isComplete: false },
  { description: "Have Fun", isComplete: false },
  { description: "Fail", isComplete: false },
];

const Home: NextPage = () => {
  const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);
  const [todos, setTodos] = useState(TodoCardArray);

  const toggleTodo = (atIndex: number) => {
    setTodos(
      todos.map((todo, index) =>
        // Here you accept a id argument to the function and replace it with hard coded ðŸ¤ª 2, to make it dynamic.
        index === atIndex
          ? { ...todo, isComplete: !todo.isComplete }
          : { ...todo }
      )
    );
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex select-none flex-col gap-2 items-center justify-center min-h-screen p-4">
        {todos.map((todoItem, index) => {
          return (
            // <div onClick={() => toggleTodo(index)}>
            <TodoCard
              description={todoItem.description}
              isComplete={todoItem.isComplete}
              key={index}
              callback={() => toggleTodo(index)}
            />
            // </div>
          );
        })}
      </main>
    </>
  );
};

const TodoCard = ({ description, isComplete, callback }: TodoCardProps) => {
  return (
    <section
      className="flex flex-row justify-between items-center w-96 p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105"
      onClick={() => callback!()}
    >
      <h2 className="text-lg text-gray-700">{description}</h2>
      <p className="text-sm text-gray-600">
        is complete: {isComplete ? "true" : "false"}
      </p>
    </section>
  );
};

export default Home;
